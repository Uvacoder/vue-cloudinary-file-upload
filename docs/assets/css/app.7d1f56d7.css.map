{"version":3,"sources":["webpack:///src/components/src/components/HelloWorld.vue","app.7d1f56d7.css","webpack:///src/src/App.vue"],"names":[],"mappings":"AAyHA,sBACA,qBAAA,CACA,SAAA,CACA,aAAA,CACA,YCvHA,CDyHA,mEAEA,qBAAA,CACA,qBAAA,CACA,UCvHA,CDyHA,qBACA,SAAA,CACA,aCvHA,CCGA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aAAA,CACA,eDCA","file":"app.7d1f56d7.css","sourcesContent":["<template>\n  <div class=\"hello\">\n    <!-- supply h1 and h2 headings -->\n    <h1>Upload to Cloudinary</h1>\n    <h2>Using Axios</h2>\n\n    <!-- create a form that will not submit toserver\n    using the upload function as a handler-->\n    <form v-on:submit.prevent=\"upload\" enctype=\"multipart/form-data\">\n      <p>\n        <label for=\"file-input\">\n          <input id=\"file-input\" type=\"file\" @change=\"handleFileChange($event)\" />\n        </label>\n      </p>\n      <button type=\"submit\" :disabled=\"filesSelected <= 0\">Upload</button>\n    </form>\n\n    <!-- display uploaded image if successful -->\n    <p v-if=\"results && results.secure_url && assetType === 'image'\">\n      <img :src=\"results.secure_url\" :alt=\"results.public_id\" />\n    </p>\n\n    <!-- display uploaded image if successful -->\n    <video\n      v-if=\"results && results.secure_url && assetType === 'video'\"\n      width=\"320\"\n      height=\"240\"\n      controls\n    >\n      <source :src=\"results.secure_url\" type=\"video/mp4\" />Your browser does not support the video tag.\n    </video>\n\n    <!-- display errors if not successful -->\n    <ul v-if=\"errors.length > 0\">\n      <!-- could add multiple attribute -->\n      <li v-for=\"(error,index) in errors\" :key=\"index\">{{error}}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  name: \"HelloWorld\",\n  data() {\n    return {\n      results: null,\n      errors: [],\n      file: null,\n      filesSelected: 0,\n      cloudName: \"picturecloud7\",\n      preset: \"bp_test_1\",\n      tags: \"browser-upload\",\n      assetType: null\n    };\n  },\n  methods: {\n    // function to handle file info obtained from local\n    // file system and set the file state\n    handleFileChange(e) {\n      console.log(\"handlefilechange\", e.target.files);\n      //returns an array of files even though multiple not used\n      this.file = e.target.files[0];\n      this.filesSelected = e.target.files.length;\n\n      //clear\n    },\n    // function to handle form submit\n    upload: function(e) {\n      console.log(\"upload\", this.file.name);\n      let reader = new FileReader();\n\n      // attach listener to be called when data from file\n      // is available\n      reader.addEventListener(\n        \"load\",\n        function() {\n          console.log(\"file reader listener\");\n          let fd = new FormData();\n          fd.append(\"upload_preset\", this.preset);\n          fd.append(\"tags\", this.tags); // Optional - add tag for image admin in Cloudinary\n          fd.append(\"resource_type\", \"auto\");\n          fd.append(\"file\", reader.result);\n          this.assetType = reader.result.startsWith(\"data:image\")\n            ? \"image\"\n            : reader.result.startsWith(\"data:video\")\n            ? \"video\"\n            : \"raw\";\n\n          let cloudinaryUploadURL = `https://api.cloudinary.com/v1_1/${this.cloudName}/upload`;\n\n          let requestObj = {\n            url: cloudinaryUploadURL,\n            method: \"POST\",\n            data: fd\n          };\n          axios(requestObj)\n            .then(response => {\n              this.results = response.data;\n              console.log(this.results);\n            })\n            .catch(error => {\n              this.errors.push(error);\n              console.log(this.error);\n            });\n        }.bind(this),\n        false\n      );\n      // clear asset type flag\n      this.assetType = null;\n      // call for file read if there is a file\n      if (this.file && this.file.name) {\n        reader.readAsDataURL(this.file);\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nform {\n  border: solid black 1px;\n  width: 30%;\n  margin: 0 auto;\n  padding: 10px;\n}\nbutton:disabled,\nbutton[disabled] {\n  border: 1px solid #999999;\n  background-color: #cccccc;\n  color: #666666;\n}\nimg {\n  width: 10%;\n  margin: 0 auto;\n}\n</style>\n\n","\nform[data-v-3f036c9b] {\n  border: solid black 1px;\n  width: 30%;\n  margin: 0 auto;\n  padding: 10px;\n}\nbutton[data-v-3f036c9b]:disabled,\nbutton[disabled][data-v-3f036c9b] {\n  border: 1px solid #999999;\n  background-color: #cccccc;\n  color: #666666;\n}\nimg[data-v-3f036c9b] {\n  width: 10%;\n  margin: 0 auto;\n}\n\n\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n\n/*# sourceMappingURL=app.7d1f56d7.css.map*/","<template>\n  <div id=\"app\">\n    <img width=\"5%\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Hello Vue in CodeSandbox!\" />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}