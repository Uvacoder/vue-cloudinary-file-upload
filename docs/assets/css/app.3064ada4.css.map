{"version":3,"sources":["webpack:///src/components/src/components/HelloWorld.vue","app.3064ada4.css","webpack:///src/src/App.vue"],"names":[],"mappings":"AAmHA,sBACA,YAAA,CAEA,kBAAA,CACA,wBAAA,CACA,uBAAA,CACA,eAAA,CACA,WCjHA,CDmHA,4BACA,eAAA,CACA,wBCjHA,CDmHA,6BACA,qBAAA,CACA,UAAA,CACA,aAAA,CACA,eAAA,CACA,YAAA,CACA,UAAA,CACA,QCjHA,CDmHA,mCACA,eAAA,CACA,UCjHA,CDoHA,uBACA,wBClHA,CDqHA,uBACA,YAAA,CACA,mBCnHA,CDqHA,6BACA,sBCnHA,CDsHA,yBACA,sBACA,+BAAA,CACA,aCpHA,CDuHA,uBACA,gBAAA,CACA,eCrHA,CDwHA,+CAEA,eCtHA,CACA,CDyHA,wBACA,qBAAA,CACA,UAAA,CACA,eAAA,CACA,kBCvHA,CDyHA,6EAEA,qBAAA,CACA,qBAAA,CACA,UCvHA,CDyHA,yBACA,aCvHA,CC9CA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aAAA,CACA,eDkDA","file":"app.3064ada4.css","sourcesContent":["<template>\n  <div class=\"hello\">\n    <!-- supply h1 and h2 headings -->\n    <h2>Upload an Image to Cloudinary</h2>\n    <!-- create a form that will not submit to a server but will prevent submit and\n    use the upload function as a handle-->\n    <form v-on:submit.prevent=\"upload\">\n          \n      <!-- allow the user to select an image file and when they have selected it call a funtion to handle this event -->\n      <label for=\"cloudname-input\">Cloud Name:</label> \n      <input id=\"cloudname-input\" v-model=\"cloudName\" placeholder=\"cloud_name\" />\n  \n      <!-- allow the user to select an image file and when they have selected it call a funtion to handle this event -->\n      <label for=\"preset-input\">Preset:</label>\n      <input id=\"preset-input\" v-model=\"preset\" placeholder=\"preset\" />\n     \n      <!-- allow the user to select an image file and when they have selected it call a funtion to handle this event -->\n      <label for=\"file-input\">Upload:</label>\n      <input\n        id=\"file-input\"\n        type=\"file\"\n        accept=\"image/png, image/jpeg\"\n        @change=\"handleFileChange($event)\"\n      />\n\n      <!-- sumbit button is disabled until a file is selected -->\n      <button type=\"submit\" :disabled=\"filesSelected < 1\">Upload</button>\n  \n    </form>\n\n    <!-- display uploaded image if successful -->\n    <section v-if=\"results && results.secure_url\">\n      <img :src=\"results.secure_url\" :alt=\"results.public_id\" />\n    </section>\n\n    <!-- display errors if not successful -->\n    <section>\n    <ul v-if=\"errors.length > 0\">\n      <li v-for=\"(error,index) in errors\" :key=\"index\">{{error}}</li>\n    </ul>\n    </section>\n\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  name: \"HelloWorld\",\n  data() {\n    return {\n      results: null,\n      errors: [],\n      file: null,\n      filesSelected: 0,\n      cloudName: \"\",\n      preset: \"\",\n      tags: \"browser-upload\"\n    };\n  },\n  methods: {\n    // function to handle file info obtained from local\n    // file system and set the file state\n    handleFileChange: function(event) {\n      console.log(\"handlefilechange\", event.target.files);\n      //returns an array of files even though multiple not used\n      this.file = event.target.files[0];\n      this.filesSelected = event.target.files.length;\n    },\n    // function to handle form submit\n    upload: function(event) {\n      console.log(\"upload\", this.file.name);\n      let reader = new FileReader();\n\n      // attach listener to be called when data from file\n      // is available\n      reader.addEventListener(\n        \"load\",\n        function() {\n          console.log(\"file reader listener\");\n          let fd = new FormData();\n          fd.append(\"upload_preset\", this.preset);\n          fd.append(\"tags\", this.tags); // Optional - add tag for image admin in Cloudinary\n          fd.append(\"file\", reader.result);\n\n          let cloudinaryUploadURL = `https://api.cloudinary.com/v1_1/${this.cloudName}/upload`;\n\n          let requestObj = {\n            url: cloudinaryUploadURL,\n            method: \"POST\",\n            data: fd\n          };\n          axios(requestObj)\n            .then(response => {\n              this.results = response.data;\n              console.log(this.results);\n            })\n            .catch(error => {\n              this.errors.push(error);\n              console.log(this.error);\n            });\n        }.bind(this),\n        false\n      );\n      // call for file read if there is a file\n      if (this.file && this.file.name) {\n        reader.readAsDataURL(this.file);\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nform {\n  display: grid;\n  padding: 1em;\n  background: #f9f9f9;\n  border: 1px solid #c1c1c1;\n  margin: 2rem auto 0 auto;\n  max-width: 600px;\n  padding: 1em;\n}\nform input {\n  background: #fff;\n  border: 1px solid #9c9c9c;\n}\nform button {\n  background-color: blue;\n  color: white;\n  font-size: 1em;\n  font-weight: bold;\n  padding: 0.7em;\n  width: 100%;\n  border: 0;\n}\nform button:hover {\n  background: gold;\n  color: black;\n}\n\nlabel {\n  padding: 0.5em 0.5em 0.5em 0;\n}\n\ninput {\n  padding: 0.7em;\n  margin-bottom: 0.5rem;\n}\ninput:focus {\n  outline: 3px solid gold;\n}\n\n@media (min-width: 400px) {\n  form {\n    grid-template-columns: 200px 1fr;\n    grid-gap: 16px;\n  }\n\n  label {\n    text-align: right;\n    grid-column: 1 / 2;\n  }\n\n  input,\n  button {\n    grid-column: 2 / 3;\n  }\n}\n\nbutton {\n  background-color: blue;\n  color: white;\n  font-weight: bold;\n  border-radius: 10px;\n}\nform button:disabled,\nform button[disabled] {\n  border: 1px solid #999999;\n  background-color: #cccccc;\n  color: #666666;\n}\nsection {\n  margin: 10px 0;\n}\n</style>\n\n","\nform[data-v-7b01eb76] {\n  display: grid;\n  padding: 1em;\n  background: #f9f9f9;\n  border: 1px solid #c1c1c1;\n  margin: 2rem auto 0 auto;\n  max-width: 600px;\n  padding: 1em;\n}\nform input[data-v-7b01eb76] {\n  background: #fff;\n  border: 1px solid #9c9c9c;\n}\nform button[data-v-7b01eb76] {\n  background-color: blue;\n  color: white;\n  font-size: 1em;\n  font-weight: bold;\n  padding: 0.7em;\n  width: 100%;\n  border: 0;\n}\nform button[data-v-7b01eb76]:hover {\n  background: gold;\n  color: black;\n}\nlabel[data-v-7b01eb76] {\n  padding: 0.5em 0.5em 0.5em 0;\n}\ninput[data-v-7b01eb76] {\n  padding: 0.7em;\n  margin-bottom: 0.5rem;\n}\ninput[data-v-7b01eb76]:focus {\n  outline: 3px solid gold;\n}\n@media (min-width: 400px) {\nform[data-v-7b01eb76] {\n    grid-template-columns: 200px 1fr;\n    grid-gap: 16px;\n}\nlabel[data-v-7b01eb76] {\n    text-align: right;\n    grid-column: 1 / 2;\n}\ninput[data-v-7b01eb76],\n  button[data-v-7b01eb76] {\n    grid-column: 2 / 3;\n}\n}\nbutton[data-v-7b01eb76] {\n  background-color: blue;\n  color: white;\n  font-weight: bold;\n  border-radius: 10px;\n}\nform button[data-v-7b01eb76]:disabled,\nform button[disabled][data-v-7b01eb76] {\n  border: 1px solid #999999;\n  background-color: #cccccc;\n  color: #666666;\n}\nsection[data-v-7b01eb76] {\n  margin: 10px 0;\n}\n\n\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n\n/*# sourceMappingURL=app.3064ada4.css.map*/","<template>\n  <div id=\"app\">\n    <img width=\"5%\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Hello Vue in CodeSandbox!\" />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}